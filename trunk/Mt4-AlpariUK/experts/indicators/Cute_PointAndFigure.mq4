/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright ?2010 Cute Point & Figure indicator v1.2 | forexpnf.info"
#property link      "www.forexpnf.info"

#property indicator_chart_window
#property indicator_buffers 1
#property indicator_color1 Blue

extern string Warning = "---- Do not change BrokerDigits ---";
extern int BrokerDigits = 4;
extern string Main_Options = "-------------- Main_Options ---------------";
extern int BoxSize = 10;
extern int ReverseOn = 3;
extern bool AlertWhenNewColumnAppears = FALSE;
extern string View_Options = "-------------- View Options ---------------";
extern color ColorUp = White;
extern color ColorDown = Orange;
extern bool X_O_view = TRUE;
extern color PriceLineColor = Yellow;
extern int SymbolSize = 10;
extern string Date_Options = "-------------- Date Options ---------------";
extern bool ShowDaysMonths = TRUE;
extern bool ShowYears = TRUE;
extern int YearShift = 300;
extern color MonthBackBoxColor = SlateGray;
extern color DaysColor = Yellow;
extern int DaysFontSize = 8;
extern color MonthsColor = Yellow;
extern int MonthsFontSize = 6;
extern color YearsColor = Green;
extern int YearsFontSize = 11;
extern string Grid_Options = "-------------- Grid Options ---------------";
extern bool ShowGrid = TRUE;
extern color GridColor = DimGray;
extern string Trends_Options = "-------------- Trends Options ---------------";
extern string Warning2 = "------ Change if understand only ------";
extern string TrendName1 = "trend1";
extern string TrendName2 = "trend2";
extern string TrendName3 = "trend3";
extern string TrendName4 = "trend4";
int gi_248 = 10;
int g_bars_252 = 0;
int gi_256 = 0;
int gi_260 = 0;
string g_day_264;
string g_month_272;
string g_text_280;
string g_day_288;
string g_month_296;
string g_year_304;
int gi_312 = 0;
int g_count_316 = 0;
int gi_320 = 0;
double g_ibuf_324[];

int init() {
   SetIndexStyle(0, DRAW_NONE);
   SetIndexBuffer(0, g_ibuf_324);
   if (BrokerDigits == 4) {
      Comment(Symbol() + " " + BoxSize + "x" + ReverseOn 
      + "\nCute       Point & Figure indicator v1.2 | www.forexpnf.info");
   } else {
      if (BrokerDigits == 5) {
         BoxSize = 10 * BoxSize;
         Comment(Symbol() + " " + (BoxSize / 10) + "x" + ReverseOn 
         + "\nCute       Point & Figure indicator v1.2 | www.forexpnf.info");
      }
   }
   ObjectCreate("serdce", OBJ_LABEL, 0, 0, 0);
   ObjectSetText("serdce", CharToStr(89), 7, "Webdings", ColorUp);
   ObjectSet("serdce", OBJPROP_CORNER, 0);
   ObjectSet("serdce", OBJPROP_XDISTANCE, 30);
   ObjectSet("serdce", OBJPROP_YDISTANCE, 10);
   return (0);
}

int deinit() {
   ObjectsDeleteAll();
   return (0);
}

int start() {
   bool li_12 = FALSE;
   double ld_48 = BoxSize * Point;
   if (Period() > 16) {
      ObjectsDeleteAll();
      Comment("\nWarning:\nIt is strongly recommended to use only smallest time frames: M1, M5. Higher time frames\ncauses inaccurate PnF charting and takes much more CPU speed, causing crash of MT4 !\n\n-- To continue, please choose smaller time frame --\n\nwww.forexpnf.info");
      return (0);
   }
   int li_16 = Bars - 1;
   int l_count_20 = 0;
   double ld_28 = Open[li_16];
   bool li_24 = FALSE;
   for (int l_index_0 = li_16; l_index_0 >= 1; l_index_0--) {
      if (li_24 == FALSE) {
         for (li_12 = FALSE; Low[l_index_0] <= ld_28 - ld_48; li_12 = TRUE) ld_28 -= ld_48;
         if (li_12) continue;
         if (High[l_index_0] >= ld_28 + ReverseOn * ld_48) {
            l_count_20++;
            li_24 = TRUE;
            for (ld_28 += ReverseOn * ld_48; High[l_index_0] >= ld_28 + ld_48; ld_28 += ld_48) {
            }
         }
      }
      if (li_24 == TRUE) {
         for (li_12 = FALSE; High[l_index_0] >= ld_28 + ld_48; li_12 = TRUE) ld_28 += ld_48;
         if (li_12 == 0) {
            if (Low[l_index_0] <= ld_28 - ReverseOn * ld_48) {
               l_count_20++;
               li_24 = FALSE;
               for (ld_28 -= ReverseOn * ld_48; Low[l_index_0] <= ld_28 - ld_48; ld_28 -= ld_48) {
               }
            }
         }
      }
   }
   if (gi_260 == FALSE) gi_260 = l_count_20;
   if (gi_260 != l_count_20) {
      if (li_24 == TRUE) {
         if (AlertWhenNewColumnAppears == TRUE) Alert(Symbol() + " ---- O to X changing - DETECTED -- ");
      } else {
         if (li_24 == FALSE) {
            if (AlertWhenNewColumnAppears == TRUE) Alert(Symbol() + " ---- X to O changing - DETECTED -- ");
            gi_256 += 2;
         }
      }
      gi_260 = FALSE;
   }
   int li_44 = l_count_20 + 5 + gi_248;
   if (ShowGrid == TRUE) {
      for (l_index_0 = 0; l_index_0 <= li_44; l_index_0++) {
         ObjectDelete("GridVr" + l_index_0);
         ObjectCreate("GridVr" + l_index_0, OBJ_VLINE, 0, Time[l_index_0 + 0], 0, Time[l_index_0 + 0], 1);
         ObjectSet("GridVr" + l_index_0, OBJPROP_COLOR, GridColor);
         ObjectSet("GridVr" + l_index_0, OBJPROP_RAY, TRUE);
         ObjectSet("GridVr" + l_index_0, OBJPROP_BACK, TRUE);
         ObjectSet("GridVr" + l_index_0, OBJPROP_WIDTH, 1);
      }
   }
   ObjectsDeleteAll(0, OBJ_RECTANGLE);
   ObjectsDeleteAll(0, OBJ_TEXT);
   ld_28 = Open[li_16];
   g_count_316 = 0;
   for (l_index_0 = li_16; l_index_0 >= 0; l_index_0--) {
      if (li_24 == FALSE) {
         for (li_12 = FALSE; Low[l_index_0] <= ld_28 - ld_48; li_12 = TRUE) {
            ld_28 -= ld_48;
            DrawBox(li_44, ld_28, ColorDown, li_24, l_index_0);
         }
         if (li_12) continue;
         if (High[l_index_0] >= ld_28 + ReverseOn * ld_48) {
            for (int li_8 = li_44; li_8 > li_44 - 1; li_8--) g_ibuf_324[li_8] = ld_28 - ld_48;
            li_44 -= 1;
            li_24 = TRUE;
            for (int l_count_4 = 0; l_count_4 < ReverseOn; l_count_4++) {
               ld_28 += ld_48;
               DrawBox(li_44, ld_28, ColorUp, li_24, l_index_0);
            }
            while (High[l_index_0] >= ld_28 + ld_48) {
               ld_28 += ld_48;
               DrawBox(li_44, ld_28, ColorUp, li_24, l_index_0);
            }
         }
      }
      if (li_24 == TRUE) {
         for (li_12 = FALSE; High[l_index_0] >= ld_28 + ld_48; li_12 = TRUE) {
            ld_28 += ld_48;
            DrawBox(li_44, ld_28, ColorUp, li_24, l_index_0);
         }
         if (li_12 == 0) {
            if (Low[l_index_0] <= ld_28 - ReverseOn * ld_48) {
               for (li_8 = li_44; li_8 > li_44 - 1; li_8--) g_ibuf_324[li_8] = ld_28 + ld_48;
               li_44 -= 1;
               li_24 = FALSE;
               for (l_count_4 = 0; l_count_4 < ReverseOn; l_count_4++) {
                  ld_28 -= ld_48;
                  DrawBox(li_44, ld_28, ColorDown, li_24, l_index_0);
               }
               while (Low[l_index_0] <= ld_28 - ld_48) {
                  ld_28 -= ld_48;
                  DrawBox(li_44, ld_28, ColorDown, li_24, l_index_0);
               }
            }
         }
      }
   }
   if (Bars != g_bars_252) {
      if (ObjectFind(TrendName1) != -1) trendplotting(TrendName1, gi_256);
      if (ObjectFind(TrendName2) != -1) trendplotting(TrendName2, gi_256);
      if (ObjectFind(TrendName3) != -1) trendplotting(TrendName3, gi_256);
      if (ObjectFind(TrendName4) != -1) trendplotting(TrendName4, gi_256);
      g_bars_252 = Bars;
      gi_256 = 0;
   }
   return (0);
}

void DrawBox(int ai_0, double ad_4, color a_color_12, int ai_16, int ai_20) {
   double l_high_24;
   double l_low_32;
   int l_str2int_44;
   int l_str2int_48;
   int li_52;
   int li_56;
   if (ai_0 > 0) {
      g_count_316++;
      if (ShowGrid == TRUE) {
         if (gi_320 == FALSE) {
            l_high_24 = 0;
            l_low_32 = 99999;
            for (int li_40 = Bars - 1; li_40 > 0; li_40--) {
               if (High[li_40] >= l_high_24) l_high_24 = High[li_40];
               if (Low[li_40] < l_low_32) l_low_32 = Low[li_40];
            }
            l_str2int_44 = StrToInteger(DoubleToStr(l_high_24 / Point, 0));
            l_str2int_48 = StrToInteger(DoubleToStr(l_low_32 / Point, 0));
            li_52 = StrToInteger(DoubleToStr(ad_4 / Point, 0)) + StrToInteger(DoubleToStr((l_str2int_44 - ad_4 / Point) / BoxSize, 0)) * BoxSize;
            li_56 = StrToInteger(DoubleToStr(ad_4 / Point, 0)) + StrToInteger(DoubleToStr((l_str2int_48 - ad_4 / Point) / BoxSize, 0)) * BoxSize;
            for (li_40 = li_52 + gi_248 * BoxSize; li_40 >= li_56 - gi_248 * BoxSize; li_40 -= BoxSize) {
               ObjectDelete("GridH" + li_40);
               ObjectCreate("GridH" + li_40, OBJ_GANNLINE, 0, Time[Bars - 1], li_40 * Point, Time[0], li_40 * Point);
               ObjectSet("GridH" + li_40, OBJPROP_COLOR, GridColor);
               ObjectSet("GridH" + li_40, OBJPROP_RAY, TRUE);
               ObjectSet("GridH" + li_40, OBJPROP_BACK, TRUE);
               ObjectSet("GridH" + li_40, OBJPROP_WIDTH, 1);
            }
            gi_320 = TRUE;
         }
      }
      ObjectCreate("priceLine_", OBJ_HLINE, 0, 0, Time[0], 0, 0);
      ObjectSet("priceLine_", OBJPROP_PRICE1, Bid);
      ObjectSet("priceLine_", OBJPROP_COLOR, PriceLineColor);
      ObjectSet("priceLine_", OBJPROP_WIDTH, 2);
      g_day_288 = TimeDay(Time[ai_20]);
      g_month_296 = TimeMonth(Time[ai_20]);
      g_year_304 = TimeYear(Time[ai_20]);
      if (X_O_view == TRUE) {
         if (ai_16 == 0) {
            ObjectCreate("Box_O" + g_count_316, OBJ_TEXT, 0, 0, 0);
            ObjectSetText("Box_O" + g_count_316, "   O", SymbolSize, "Verdana", a_color_12);
            ObjectSet("Box_O" + g_count_316, OBJPROP_TIME1, Time[ai_0]);
            ObjectSet("Box_O" + g_count_316, OBJPROP_PRICE1, ad_4);
            ObjectSet("Box_O" + g_count_316, OBJPROP_BACK, TRUE);
            if (ShowDaysMonths == TRUE) {
               if (g_day_264 != g_day_288) {
                  ObjectDelete("Box_O" + g_count_316);
                  ObjectCreate("ShowDaysMonths_Day" + g_count_316, OBJ_TEXT, 0, 0, 0);
                  ObjectSetText("ShowDaysMonths_Day" + g_count_316, "      " + g_day_288, DaysFontSize, "Calibri", DaysColor);
                  ObjectSet("ShowDaysMonths_Day" + g_count_316, OBJPROP_TIME1, Time[ai_0]);
                  ObjectSet("ShowDaysMonths_Day" + g_count_316, OBJPROP_PRICE1, ad_4);
                  ObjectSet("ShowDaysMonths_Day" + g_count_316, OBJPROP_BACK, FALSE);
                  g_day_264 = g_day_288;
               }
            }
            if (ShowDaysMonths == TRUE) {
               if (g_month_272 != g_month_296) {
                  ObjectCreate("BackBox" + g_count_316, OBJ_RECTANGLE, 0, Time[ai_0], ad_4, Time[ai_0 - 1], ad_4 - BoxSize * Point + gi_312 * Point);
                  ObjectSet("BackBox" + g_count_316, OBJPROP_BACK, TRUE);
                  ObjectSet("BackBox" + g_count_316, OBJPROP_COLOR, MonthBackBoxColor);
                  ObjectDelete("Box_O" + g_count_316);
                  ObjectDelete("ShowDaysMonths_Day" + g_count_316);
                  ObjectCreate("ShowDaysMonths_Month" + g_count_316, OBJ_TEXT, 0, 0, 0);
                  ObjectSetText("ShowDaysMonths_Month" + g_count_316, "         " + g_month_296 + "-" + g_day_288, MonthsFontSize, "Calibri Bold", MonthsColor);
                  ObjectSet("ShowDaysMonths_Month" + g_count_316, OBJPROP_TIME1, Time[ai_0]);
                  ObjectSet("ShowDaysMonths_Month" + g_count_316, OBJPROP_PRICE1, ad_4);
                  ObjectSet("ShowDaysMonths_Month" + g_count_316, OBJPROP_BACK, FALSE);
                  g_month_272 = g_month_296;
               }
            }
            if (ShowYears == TRUE) {
               if (g_text_280 != g_year_304) {
                  ObjectCreate("ShowDaysMonths_Year" + g_count_316, OBJ_TEXT, 0, 0, 0);
                  ObjectSetText("ShowDaysMonths_Year" + g_count_316, g_year_304, YearsFontSize, "Arial Bold", YearsColor);
                  ObjectSet("ShowDaysMonths_Year" + g_count_316, OBJPROP_TIME1, Time[ai_0]);
                  ObjectSet("ShowDaysMonths_Year" + g_count_316, OBJPROP_PRICE1, ad_4 + YearShift * Point);
                  ObjectSet("ShowDaysMonths_Year" + g_count_316, OBJPROP_BACK, FALSE);
                  ObjectSet("ShowDaysMonths_Year" + g_count_316, OBJPROP_ANGLE, 90);
                  g_text_280 = g_year_304;
               }
            }
         } else {
            ObjectCreate("Box_X" + g_count_316, OBJ_TEXT, 0, 0, 0);
            ObjectSetText("Box_X" + g_count_316, "   X", SymbolSize, "Verdana", a_color_12);
            ObjectSet("Box_X" + g_count_316, OBJPROP_TIME1, Time[ai_0]);
            ObjectSet("Box_X" + g_count_316, OBJPROP_PRICE1, ad_4);
            ObjectSet("Box_X" + g_count_316, OBJPROP_BACK, TRUE);
            if (ShowDaysMonths == TRUE) {
               if (g_day_264 != g_day_288) {
                  ObjectDelete("Box_X" + g_count_316);
                  ObjectCreate("ShowDaysMonths_Day" + g_count_316, OBJ_TEXT, 0, 0, 0);
                  ObjectSetText("ShowDaysMonths_Day" + g_count_316, "      " + g_day_288, DaysFontSize, "Calibri", DaysColor);
                  ObjectSet("ShowDaysMonths_Day" + g_count_316, OBJPROP_TIME1, Time[ai_0]);
                  ObjectSet("ShowDaysMonths_Day" + g_count_316, OBJPROP_PRICE1, ad_4);
                  ObjectSet("ShowDaysMonths_Day" + g_count_316, OBJPROP_BACK, FALSE);
                  g_day_264 = g_day_288;
               }
            }
            if (ShowDaysMonths == TRUE) {
               if (g_month_272 != g_month_296) {
                  ObjectCreate("Box" + g_count_316, OBJ_RECTANGLE, 0, Time[ai_0], ad_4, Time[ai_0 - 1], ad_4 - BoxSize * Point + gi_312 * Point);
                  ObjectSet("Box" + g_count_316, OBJPROP_BACK, TRUE);
                  ObjectSet("Box" + g_count_316, OBJPROP_COLOR, MonthBackBoxColor);
                  ObjectDelete("Box_X" + g_count_316);
                  ObjectDelete("ShowDaysMonths_Day" + g_count_316);
                  ObjectCreate("ShowDaysMonths_Month" + g_count_316, OBJ_TEXT, 0, 0, 0);
                  ObjectSetText("ShowDaysMonths_Month" + g_count_316, "         " + g_month_296 + "-" + g_day_288, MonthsFontSize, "Calibri Bold", MonthsColor);
                  ObjectSet("ShowDaysMonths_Month" + g_count_316, OBJPROP_TIME1, Time[ai_0]);
                  ObjectSet("ShowDaysMonths_Month" + g_count_316, OBJPROP_PRICE1, ad_4);
                  ObjectSet("ShowDaysMonths_Month" + g_count_316, OBJPROP_BACK, FALSE);
                  g_month_272 = g_month_296;
               }
            }
            if (ShowYears == TRUE) {
               if (g_text_280 != g_year_304) {
                  ObjectCreate("ShowDaysMonths_Year" + g_count_316, OBJ_TEXT, 0, 0, 0);
                  ObjectSetText("ShowDaysMonths_Year" + g_count_316, g_year_304, YearsFontSize, "Arial Bold", YearsColor);
                  ObjectSet("ShowDaysMonths_Year" + g_count_316, OBJPROP_TIME1, Time[ai_0]);
                  ObjectSet("ShowDaysMonths_Year" + g_count_316, OBJPROP_PRICE1, ad_4 + YearShift * Point);
                  ObjectSet("ShowDaysMonths_Year" + g_count_316, OBJPROP_BACK, FALSE);
                  ObjectSet("ShowDaysMonths_Year" + g_count_316, OBJPROP_ANGLE, 90);
                  g_text_280 = g_year_304;
               }
            }
         }
      } else {
         if (X_O_view == FALSE) {
            if (ShowGrid == TRUE) gi_312 = 0;
            else {
               if (BoxSize <= 10) gi_312 = 1;
               if (BoxSize <= 20 && BoxSize > 10) gi_312 = 2;
               if (BoxSize <= 30 && BoxSize > 20) gi_312 = 3;
               if (BoxSize <= 40 && BoxSize > 30) gi_312 = 4;
               if (BoxSize <= 50 && BoxSize > 40) gi_312 = 5;
               if (BoxSize <= 60 && BoxSize > 50) gi_312 = 6;
               if (BoxSize <= 70 && BoxSize > 60) gi_312 = 7;
               if (BoxSize <= 80 && BoxSize > 70) gi_312 = 8;
               if (BoxSize <= 90 && BoxSize > 80) gi_312 = 9;
               if (BoxSize > 90) gi_312 = 10;
            }
            ObjectCreate("Box" + g_count_316, OBJ_RECTANGLE, 0, 0, 0, 0, 0);
            ObjectSet("Box" + g_count_316, OBJPROP_TIME1, Time[ai_0]);
            ObjectSet("Box" + g_count_316, OBJPROP_PRICE1, ad_4);
            ObjectSet("Box" + g_count_316, OBJPROP_TIME2, Time[ai_0 - 1]);
            ObjectSet("Box" + g_count_316, OBJPROP_PRICE2, ad_4 - BoxSize * Point + gi_312 * Point);
            ObjectSet("Box" + g_count_316, OBJPROP_BACK, TRUE);
            ObjectSet("Box" + g_count_316, OBJPROP_COLOR, a_color_12);
            if (ShowDaysMonths == TRUE) {
               if (g_day_264 != g_day_288) {
                  ObjectDelete("Box_O" + g_count_316);
                  ObjectCreate("ShowDaysMonths_Day" + g_count_316, OBJ_TEXT, 0, 0, 0);
                  ObjectSetText("ShowDaysMonths_Day" + g_count_316, "      " + g_day_288, DaysFontSize, "Calibri", DaysColor);
                  ObjectSet("ShowDaysMonths_Day" + g_count_316, OBJPROP_TIME1, Time[ai_0]);
                  ObjectSet("ShowDaysMonths_Day" + g_count_316, OBJPROP_PRICE1, ad_4);
                  ObjectSet("ShowDaysMonths_Day" + g_count_316, OBJPROP_BACK, FALSE);
                  g_day_264 = g_day_288;
               }
            }
            if (ShowDaysMonths == TRUE) {
               if (g_month_272 != g_month_296) {
                  ObjectCreate("BackBox" + g_count_316, OBJ_RECTANGLE, 0, Time[ai_0], ad_4, Time[ai_0 - 1], ad_4 - BoxSize * Point + gi_312 * Point);
                  ObjectSet("BackBox" + g_count_316, OBJPROP_BACK, TRUE);
                  ObjectSet("BackBox" + g_count_316, OBJPROP_COLOR, MonthBackBoxColor);
                  ObjectDelete("Box" + g_count_316);
                  ObjectDelete("ShowDaysMonths_Day" + g_count_316);
                  ObjectCreate("ShowDaysMonths_Month" + g_count_316, OBJ_TEXT, 0, 0, 0);
                  ObjectSetText("ShowDaysMonths_Month" + g_count_316, "         " + g_month_296 + "-" + g_day_288, MonthsFontSize, "Calibri Bold", MonthsColor);
                  ObjectSet("ShowDaysMonths_Month" + g_count_316, OBJPROP_TIME1, Time[ai_0]);
                  ObjectSet("ShowDaysMonths_Month" + g_count_316, OBJPROP_PRICE1, ad_4);
                  ObjectSet("ShowDaysMonths_Month" + g_count_316, OBJPROP_BACK, FALSE);
                  g_month_272 = g_month_296;
               }
            }
            if (ShowYears == TRUE) {
               if (g_text_280 != g_year_304) {
                  ObjectCreate("ShowDaysMonths_Year" + g_count_316, OBJ_TEXT, 0, 0, 0);
                  ObjectSetText("ShowDaysMonths_Year" + g_count_316, g_year_304, YearsFontSize, "Arial Bold", YearsColor);
                  ObjectSet("ShowDaysMonths_Year" + g_count_316, OBJPROP_TIME1, Time[ai_0]);
                  ObjectSet("ShowDaysMonths_Year" + g_count_316, OBJPROP_PRICE1, ad_4 + YearShift * Point);
                  ObjectSet("ShowDaysMonths_Year" + g_count_316, OBJPROP_BACK, FALSE);
                  ObjectSet("ShowDaysMonths_Year" + g_count_316, OBJPROP_ANGLE, 90);
                  g_text_280 = g_year_304;
               }
            }
         }
      }
   }
}

void trendplotting(string a_name_0, int ai_8) {
   int li_40;
   int li_48;
   int l_datetime_12 = ObjectGet(a_name_0, OBJPROP_TIME1);
   double ld_16 = ObjectGet(a_name_0, OBJPROP_PRICE1);
   int l_datetime_24 = ObjectGet(a_name_0, OBJPROP_TIME2);
   double ld_28 = ObjectGet(a_name_0, OBJPROP_PRICE2);
   for (int l_index_36 = 0; l_index_36 < Bars; l_index_36++)
      if (l_datetime_12 >= Time[l_index_36 + 1] && l_datetime_12 < Time[l_index_36]) li_40 = l_index_36;
   for (int l_index_44 = 0; l_index_44 < Bars; l_index_44++)
      if (l_datetime_24 >= Time[l_index_44 + 1] && l_datetime_24 < Time[l_index_44]) li_48 = l_index_44;
   l_datetime_12 = Time[li_40 + ai_8];
   l_datetime_24 = Time[li_48 + ai_8];
   ObjectSet(a_name_0, OBJPROP_TIME1, l_datetime_12);
   ObjectSet(a_name_0, OBJPROP_PRICE1, ld_16);
   ObjectSet(a_name_0, OBJPROP_TIME2, l_datetime_24);
   ObjectSet(a_name_0, OBJPROP_PRICE2, ld_28);
}
