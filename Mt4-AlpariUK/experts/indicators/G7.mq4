/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/

#property indicator_separate_window
#property indicator_buffers 8
#property indicator_color1 Aqua
#property indicator_color2 Blue
#property indicator_color3 Yellow
#property indicator_color4 Green
#property indicator_color5 MediumOrchid
#property indicator_color6 Red
#property indicator_color7 White
#property indicator_color8 Black
#property indicator_width1 1
#property indicator_level1 0

extern int PriceCheckPoint = 23;
int OneDay = 86400;
int OneHour = 3600;
double ExtMapBuffer0[];
double ExtMapBuffer1[];
double ExtMapBuffer2[];
double ExtMapBuffer3[];
double ExtMapBuffer4[];
double ExtMapBuffer5[];
double ExtMapBuffer6[];
 
int init() {
   SetIndexStyle(0, DRAW_LINE, STYLE_SOLID);
   SetIndexStyle(1, DRAW_LINE, STYLE_SOLID);
   SetIndexStyle(2, DRAW_LINE, STYLE_SOLID);
   SetIndexStyle(3, DRAW_LINE, STYLE_SOLID);
   SetIndexStyle(4, DRAW_LINE, STYLE_SOLID);
   SetIndexStyle(5, DRAW_LINE, STYLE_SOLID);
   SetIndexStyle(6, DRAW_LINE, STYLE_SOLID);
   SetIndexBuffer(0, ExtMapBuffer0);
   SetIndexBuffer(1, ExtMapBuffer1);
   SetIndexBuffer(2, ExtMapBuffer2);
   SetIndexBuffer(3, ExtMapBuffer3);
   SetIndexBuffer(4, ExtMapBuffer4);
   SetIndexBuffer(5, ExtMapBuffer5);
   SetIndexBuffer(6, ExtMapBuffer6);
   SetIndexLabel(0, "EUR");
   SetIndexLabel(1, "GBP");
   SetIndexLabel(2, "AUD");
   SetIndexLabel(3, "CAD");
   SetIndexLabel(4, "CHF");
   SetIndexLabel(5, "JPY");
   SetIndexLabel(6, "USD");
   PriceCheckPoint = PriceCheckPoint % 24;
   IndicatorShortName("G7 @ " + PriceCheckPoint);
   IndicatorDigits(4);
   return (0);
}

int start() {
   double cprice[6], clprice[6], mv[6];
   //Print("PriceCheckPoint @ ", TimeToStr(optime), " EU ", getpricebytime( "EURUSD", 0, optime));
   int counted_bars = IndicatorCounted();
   if (counted_bars > 0) counted_bars--;
   int limit = Bars - counted_bars;
   for (int i = 0; i < limit; i++) {
     datetime optime = (iTime( "EURUSD", 0, i) - PriceCheckPoint * OneHour) / OneDay * OneDay + PriceCheckPoint * OneHour;
     cprice[0] = 1 / iClose("EURUSD", 0, i+1);   // 100$ = 80EUR
     cprice[1] = 1 / iClose("GBPUSD", 0, i+1);   // 100$ = 60GBP
     cprice[2] = 1 / iClose("AUDUSD", 0, i+1);   // 100$ = 120AUD
     cprice[3] = iClose("USDCAD", 0, i+1);   // 100$ = 130CAD
     cprice[4] = iClose("USDCHF", 0, i+1);   // 100$ = 50CHF
     cprice[5] = iClose("USDJPY", 0, i+1);   // 100$ = 10000Y
     cprice[6] = 1;
     if( cprice[0] != 0 && cprice[1] != 0 && cprice[2] != 0 && cprice[3] != 0 && cprice[4] != 0 && cprice[5] != 0
         && iClose("EURUSD", 0, i) != 0
         && iClose("GBPUSD", 0, i) != 0
         && iClose("AUDUSD", 0, i) != 0
         && iClose("USDCAD", 0, i) != 0
         && iClose("USDCHF", 0, i) != 0
         && iClose("USDJPY", 0, i) != 0) {
         clprice[0] = 1 / iClose("EURUSD", 0, i);
         clprice[1] = 1 / iClose("GBPUSD", 0, i);
         clprice[2] = 1 / iClose("AUDUSD", 0, i);
         clprice[3] = iClose("USDCAD", 0, i);
         clprice[4] = iClose("USDCHF", 0, i);
         clprice[5] = iClose("USDJPY", 0, i);
         mv[0] = clprice[0] / cprice[0];
         mv[1] = clprice[1] / cprice[1];
         mv[2] = clprice[2] / cprice[2];
         mv[3] = clprice[3] / cprice[3];
         mv[4] = clprice[4] / cprice[4];
         mv[5] = clprice[5] / cprice[5];
         ExtMapBuffer0[i] = (1 + 1 / mv[1] + 1 / mv[2] + 1 / mv[3] + 1 / mv[4] + 1 / mv[5]) / mv[0] * 10000 / 6 - 10000;
         ExtMapBuffer1[i] = (1 + 1 / mv[0] + 1 / mv[2] + 1 / mv[3] + 1 / mv[4] + 1 / mv[5]) / mv[1] * 10000 / 6 - 10000;
         ExtMapBuffer2[i] = (1 + 1 / mv[0] + 1 / mv[1] + 1 / mv[3] + 1 / mv[4] + 1 / mv[5]) / mv[2] * 10000 / 6 - 10000;
         ExtMapBuffer3[i] = (1 + 1 / mv[0] + 1 / mv[1] + 1 / mv[2] + 1 / mv[4] + 1 / mv[5]) / mv[3] * 10000 / 6 - 10000;
         ExtMapBuffer4[i] = (1 + 1 / mv[0] + 1 / mv[1] + 1 / mv[2] + 1 / mv[3] + 1 / mv[5]) / mv[4] * 10000 / 6 - 10000;
         ExtMapBuffer5[i] = (1 + 1 / mv[0] + 1 / mv[1] + 1 / mv[2] + 1 / mv[3] + 1 / mv[4]) / mv[5] * 10000 / 6 - 10000;
         ExtMapBuffer6[i] = (mv[0] + mv [1] + mv[2] + mv[3] + mv[4] + mv[5]) * 10000 / 6 - 10000;
      }    
      else {
         //Print("Can not load Price at checkpoint ", TimeToStr( optime), " ", cprice[0], cprice[1], cprice[2], cprice[3], cprice[4], cprice[5]);
         return (0);
      }
      
   /*
      if (SMA_variable == 0) {
         lda_8[0] = iClose("EURUSD", 0, li_12) / iMA("EURUSD", 0, SMA_base, 0, MODE_SMA, PRICE_CLOSE, li_12);
         lda_8[1] = iClose("GBPUSD", 0, li_12) / iMA("GBPUSD", 0, SMA_base, 0, MODE_SMA, PRICE_CLOSE, li_12);
         lda_8[2] = iClose("AUDUSD", 0, li_12) / iMA("AUDUSD", 0, SMA_base, 0, MODE_SMA, PRICE_CLOSE, li_12);
         lda_8[3] = iMA("USDCAD", 0, SMA_base, 0, MODE_SMA, PRICE_CLOSE, li_12) / iClose("USDCAD", 0, li_12);
         lda_8[4] = iMA("USDCHF", 0, SMA_base, 0, MODE_SMA, PRICE_CLOSE, li_12) / iClose("USDCHF", 0, li_12);
         lda_8[5] = iMA("USDJPY", 0, SMA_base, 0, MODE_SMA, PRICE_CLOSE, li_12) / iClose("USDJPY", 0, li_12);
      } else {
         if (SMA_variable > 0) {
            lda_8[0] = iMA("EURUSD", 0, SMA_variable, 0, MODE_SMA, PRICE_CLOSE, li_12) / iMA("EURUSD", 0, SMA_base, 0, MODE_SMA, PRICE_CLOSE, li_12);
            lda_8[1] = iMA("GBPUSD", 0, SMA_variable, 0, MODE_SMA, PRICE_CLOSE, li_12) / iMA("GBPUSD", 0, SMA_base, 0, MODE_SMA, PRICE_CLOSE, li_12);
            lda_8[2] = iMA("AUDUSD", 0, SMA_variable, 0, MODE_SMA, PRICE_CLOSE, li_12) / iMA("AUDUSD", 0, SMA_base, 0, MODE_SMA, PRICE_CLOSE, li_12);
            lda_8[3] = iMA("USDCAD", 0, SMA_base, 0, MODE_SMA, PRICE_CLOSE, li_12) / iMA("USDCAD", 0, SMA_variable, 0, MODE_SMA, PRICE_CLOSE, li_12);
            lda_8[4] = iMA("USDCHF", 0, SMA_base, 0, MODE_SMA, PRICE_CLOSE, li_12) / iMA("USDCHF", 0, SMA_variable, 0, MODE_SMA, PRICE_CLOSE, li_12);
            lda_8[5] = iMA("USDJPY", 0, SMA_base, 0, MODE_SMA, PRICE_CLOSE, li_12) / iMA("USDJPY", 0, SMA_variable, 0, MODE_SMA, PRICE_CLOSE, li_12);
         }
      }
      g_ibuf_96[li_12] = lda_8[0] * (100 / lda_8[1] + 100.0 + 100 / lda_8[2] + 100 / lda_8[3] + 100 / lda_8[4] + 100 / lda_8[5]) - 600.0;
   //   if (×÷ÕßQQºÅ == "6303590") 
      g_ibuf_100[li_12] = lda_8[1] * (100 / lda_8[0] + 100.0 + 100 / lda_8[2] + 100 / lda_8[3] + 100 / lda_8[4] + 100 / lda_8[5]) - 600.0;
      g_ibuf_104[li_12] = lda_8[2] * (100 / lda_8[0] + 100.0 + 100 / lda_8[1] + 100 / lda_8[3] + 100 / lda_8[4] + 100 / lda_8[5]) - 600.0;
      g_ibuf_108[li_12] = lda_8[3] * (100 / lda_8[0] + 100.0 + 100 / lda_8[1] + 100 / lda_8[2] + 100 / lda_8[4] + 100 / lda_8[5]) - 600.0;
      g_ibuf_112[li_12] = lda_8[4] * (100 / lda_8[0] + 100.0 + 100 / lda_8[1] + 100 / lda_8[2] + 100 / lda_8[3] + 100 / lda_8[5]) - 600.0;
      g_ibuf_116[li_12] = lda_8[5] * (100 / lda_8[0] + 100.0 + 100 / lda_8[1] + 100 / lda_8[2] + 100 / lda_8[3] + 100 / lda_8[4]) - 600.0;
      g_ibuf_120[li_12] = 100 / lda_8[0] + 100 / lda_8[1] + 100 / lda_8[2] + 100 / lda_8[3] + 100 / lda_8[4] + 100 / lda_8[5] - 600.0;
   }
   */
   }
   return (0);
}

